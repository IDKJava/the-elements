apply plugin: 'com.android.application'

task buildProto(type: Exec) {
    commandLine './buildscript.sh'
    if (project.ndkdir) {
        println 'ndkdir set.'
        println ndkdir
        environment ANDROID_NDK_HOME:ndkdir
    }
    else {
        println 'WARNING: ndkdir not set, ensure ANDROID_NDK_HOME is set in the environment.'
    }
    doLast {
      println './buildscript.sh complete.'
    }
}
assembleDebug.dependsOn(buildProto)
assembleRelease.dependsOn(buildProto)

task keystoreInfo << {
    def console = System.console()
    if (console == null)
        throw new IllegalStateException('no console available, use --no-daemon flag')

    def pass = new String(console.readPassword('\n\nEnter keystore password: '))
    android.signingConfigs.release.storePassword = pass
    android.signingConfigs.release.keyPassword = pass
}

tasks.whenTaskAdded { task ->
    if (task.name == 'validateReleaseSigning')
        task.dependsOn keystoreInfo
}

dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
    compile project(':android-color-picker:AmbilWarna')
    compile project(':kamcord-android-sdk:kamcord')
    compile project(':Android-WVersionManager:library')
    compile project(':android-ColorPickerPreference')
}

android {
    compileSdkVersion 10
    buildToolsVersion "22.0.1"

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
	                java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    signingConfigs {
        release {
            def envKeystore = System.getenv("IDKJAVA_KEYSTORE")
            if (envKeystore) {
                storeFile file(System.getenv("IDKJAVA_KEYSTORE"))
            }
            storePassword ''
            def envKeyalias = System.getenv("IDKJAVA_KEYALIAS")
            if (envKeyalias) {
                keyAlias System.getenv("IDKJAVA_KEYALIAS")
            }
            else {
                keyAlias ''
            }
            keyPassword ''
        }
    }
    buildTypes {
        debug {
            resValue "string", "app_name", "The Elements Debug"
        }
        release {
            resValue "string", "app_name", "The Elements"
            signingConfig signingConfigs.release
        }
    }
}
